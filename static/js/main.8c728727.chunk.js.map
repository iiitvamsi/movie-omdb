{"version":3,"sources":["Cards.js","Search.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","maxWidth","media","height","paddingTop","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","avatar","backgroundColor","red","Cards","props","classes","React","useState","isFavourite","setIsFavourite","favouriteData","setFavouriteData","handleFavourite","data","localStorage","setItem","JSON","stringify","Error","style","color","Card","className","CardHeader","Avatar","aria-label","Title","action","IconButton","title","subheader","Year","CardMedia","image","Poster","CardContent","Typography","variant","component","Plot","CardActions","disableSpacing","onClick","Search","searchTerm","setSearchTerm","movieData","setMovieData","showCards","setShowCards","useEffect","fetch","then","res","json","catch","err","console","log","value","onChange","e","margin","Button","type","event","target","preventDefault","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.8c728727.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport { red } from '@material-ui/core/colors';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        maxWidth: 345,\n    },\n    media: {\n        height: 0,\n        paddingTop: '56.25%', // 16:9\n    },\n    expand: {\n        transform: 'rotate(0deg)',\n        marginLeft: 'auto',\n        transition: theme.transitions.create('transform', {\n            duration: theme.transitions.duration.shortest,\n        }),\n    },\n    expandOpen: {\n        transform: 'rotate(180deg)',\n    },\n    avatar: {\n        backgroundColor: red[500],\n    },\n}));\n\nfunction Cards(props) {\n    const classes = useStyles();\n\n    const [isFavourite, setIsFavourite] = React.useState(false);\n    const [favouriteData, setFavouriteData] = React.useState([])\n\n    function handleFavourite() {\n        setIsFavourite(!isFavourite)\n        if (!isFavourite) {\n            setFavouriteData(props.data)\n            localStorage.setItem(\"Favourite\", JSON.stringify(favouriteData))\n        }\n    }\n\n    return (\n        <div>\n            {props.data.Error &&\n                <p style={{ color: \"red\" }}>{props.data.Error}</p>\n            }\n\n            <Card className={classes.root}>\n                <CardHeader\n                    avatar={\n                        <Avatar aria-label=\"recipe\" className={classes.avatar}>\n                            {props.data.Title}\n                        </Avatar>\n                    }\n                    action={\n                        <IconButton aria-label=\"settings\">\n                            <MoreVertIcon />\n                        </IconButton>\n                    }\n                    title={props.data.Title}\n                    subheader={props.data.Year}\n                />\n                <CardMedia\n                    className={classes.media}\n                    image={props.data.Poster}\n                    title={props.data.Title}\n                />\n                <CardContent>\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                        {props.data.Plot}\n                    </Typography>\n                </CardContent>\n                <CardActions disableSpacing>\n                    <IconButton aria-label=\"add to favorites\">\n                        {\n                            isFavourite && (\n                                <FavoriteIcon onClick={handleFavourite} />\n                            )\n                        }\n\n                        {\n                            !isFavourite && (\n                                <FavoriteBorderIcon onClick={handleFavourite} />\n                            )\n                        }\n                    </IconButton>\n                </CardActions>\n            </Card>\n\n        </div>\n\n    )\n}\n\nexport default Cards\n","import React, { useState, useEffect } from 'react'\nimport { Button } from '@material-ui/core';\nimport SearchBar from \"material-ui-search-bar\";\nimport './Search.css'\nimport Cards from \"./Cards\"\n\nfunction Search() {\n\n    const [searchTerm, setSearchTerm] = useState('');\n    const [movieData, setMovieData] = useState({});\n    const [showCards, setShowCards] = useState(false)\n\n    function getSearchTerm(event) {\n        console.log(event.target.value)\n        event.preventDefault()\n        setShowCards(true)\n        if (searchTerm === '') {\n            setShowCards(false)\n        }\n        console.log(searchTerm)\n    }\n\n\n    useEffect(() => {\n        fetch(\"http://www.omdbapi.com/?t=\" + searchTerm + \"&apikey=f9f23e7e\").then(\n            res => res.json()).then(\n                data => setMovieData(data)\n            )\n            .catch(err => console.log(err))\n    }, [searchTerm])\n\n\n\n    return (\n        <div>\n            <form className=\"search\">\n                <SearchBar\n                    value={searchTerm}\n                    onChange={e => setSearchTerm(e)}\n                    style={{\n                        margin: '0 auto',\n                        maxWidth: 800\n                    }}\n                />\n\n                <div className=\"searchButton\">\n                    <Button type=\"submit\" onClick={getSearchTerm} color=\"primary\" >Movie Search</Button>\n                </div>\n            </form>\n            {showCards && (\n                <Cards data={movieData}></Cards>\n            )}\n\n        </div>\n    )\n}\n\nexport default Search\n","import React from 'react';\nimport './App.css';\nimport Search from './Search'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Search></Search>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}